import * as moment from 'moment';
import { max, min } from 'lodash';
import { DocumentFigure } from './document.figure';
import { Injectable } from '@nestjs/common';

interface DocumentGeneratorInterface {
  doc: any,
  label?: string,
  value?: string,
  images?: string,
  signatureImage?: string,
  offset?: number,
  writingYValue?: number
  formData?: any
  checked?: boolean,
  checkedInAt?: Date,
  checkedOutAt?: Date,
  hotel?: string
}

@Injectable()
export class DocumentGenerator extends DocumentFigure {
  private boldFontFamily = 'ArialUnicode-Bold';
  private fontFamily = 'ArialUnicode';
  private formattedLabels: any = {
    firstName: 'First name',
    lastName: 'Last name',
    documentType: 'Document type',
    documentValue: 'Document number',
  };

  generateHeader({ doc, hotel }: DocumentGeneratorInterface): void {
    doc
      .fontSize(22)
      .font(this.boldFontFamily)
      .fillColor('#444444')
      .text(hotel, 50, 57)
      .fontSize(10)
      .text(moment(new Date()).format('MMM DD, YYYY'), 200, 62, { align: 'right' })
      .fontSize(15)
      .font(this.fontFamily)
      .text('Online check in confirmation', 50, 85)
      .moveDown();

    this.generateHr({ doc, color: '#2a8bf2', y: 110, lineWidth: 4 });
  }

  generateBookingInfo ({ doc, checkedInAt, checkedOutAt, writingYValue }: DocumentGeneratorInterface): number {
    let y = writingYValue;

    doc
      .fillColor('#444444')
      .fontSize(20)
      .font(this.boldFontFamily)
      .text('Booking information', 50, y);
    y += 30;

    this.generateHr({ doc, y });
    y += 15;

    doc
      .fontSize(10)
      .font(this.boldFontFamily)
      .text('Check in date', 50, y)
      .font(this.fontFamily)
      .text(moment(checkedInAt).format('MMM DD, YYYY'), 150, y);
    y += 15;

    doc
      .fontSize(10)
      .font(this.boldFontFamily)
      .text('Check out date', 50, y)
      .font(this.fontFamily)
      .text(moment(checkedOutAt).format('MMM DD, YYYY'), 150, y);

    y += 15;
    this.generateHr({ doc, y });
    y += 50;
    return y;
  };

  generateGuestInfo ({ doc, formData, writingYValue }: DocumentGeneratorInterface): number {
    let y = writingYValue;
    const guestDetails = formData.guestDetails;
    doc
      .fillColor('#444444')
      .fontSize(20)
      .font(this.boldFontFamily)
      .text('Guest details', 50, y);
    y += 30;

    this.generateHr({ doc, y });
    y += 10;
    const maxValueLength = guestDetails.reduce((a, b) => {
      return  a.value.length > b.value.length ? a : b
    });
    const offset = maxValueLength.value.length * 7;

    for (const index of guestDetails) {
      let { label, value } = index;

      if (this.formattedLabels[label]) {
        label = this.formattedLabels[label];
      }
      if (value instanceof Date) {
        value = moment(value).format('DD/MM/YYYY')
      }

      y = this.generateGuestInfoRow({ doc, label, value, offset, writingYValue: y });
    }
    y += 5;
    this.generateHr({ doc, y });
    y += 25;
    return y;
  };

  generateSignature({ doc, signatureImage, writingYValue }: DocumentGeneratorInterface): number {
    let y = writingYValue;

    doc.image(signatureImage, 50, y, { height: 50, width: 100 });
    y += 40;
    this.generateHr({
      doc,
      y,
      lineWidth: 1,
      length: 170,
    });
    y += 5;

    doc
      .fontSize(10)
      .font(this.fontFamily)
      .text('Guest signature', 70, y);
    return y;
  };

  generateCheckboxAnswer ({ doc, checked, label, writingYValue }: DocumentGeneratorInterface): number {
    let y = writingYValue;
    y += 30;
    doc
      .fontSize(10)
      .font(this.boldFontFamily)
      .text(`${label} : ${checked ? '✓' : '✗'}`,
        50,
        y,
        { align: 'left', width: 500 });
    return y;
  };

  generateFilePages({ doc, images, label }: DocumentGeneratorInterface) : void {
    const fileNumber = images.length;
    for (let i = 0; i < images.length; i += 1) {
      const image = images[i];
      let header = label;
      if (fileNumber > 1) {
        header = `${label} (${i + 1} of ${fileNumber})`;
      }
      doc.addPage()
        .fontSize(14)
        .text(
          header,
          50,
          50,
          { align: 'center', width: 500 },
        );

      doc.image(image, 50, 100, { height: 400, width: 500 });
    }
  }


  generateFooter({ doc }: DocumentGeneratorInterface): void {
    this.generateHr({
      doc,
      y: 740,
    });
    doc
      .fontSize(10)
      .text(
        'This check-in form was generated by EasyWay Technologies LTD',
        50,
        760,
        { align: 'center', width: 500 },
      )
      .text(
        'https://www.easyway.ai',
        50,
        775,
        { align: 'center', width: 500 },
      );
  }

  generateGuestInfoRow({ doc, label, value, offset, writingYValue }: DocumentGeneratorInterface): number {
    let y = writingYValue;

    const maxCharacters = 35;
    const boundedOffset = min([offset, maxCharacters * 7]);

    const wrappedLabels = this.wordWrap(label, maxCharacters);
    const wrappedValues = this.wordWrap(value, maxCharacters);

    const labelY = this.addTextToDoc(doc, wrappedLabels, this.boldFontFamily, y, 0);
    const valueY = this.addTextToDoc(doc, wrappedValues, this.fontFamily, y, boundedOffset);

    y = max([labelY, valueY]);
    y += 15;
    return y;
  };
}
